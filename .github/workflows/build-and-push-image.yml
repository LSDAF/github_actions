name: 🐳 Build and Push Docker Image by SHA

run-name: Build and push image for commit ${{ github.event.inputs.git_sha }}

on:
  workflow_dispatch:
    inputs:
      git_sha:
        description: 'Git SHA commit to build'
        required: true
        type: string
      github_token:
        description: 'GitHub Personal Access Token with read:org permissions'
        required: true
        type: string

jobs:
  build-and-push:
    runs-on: 'ubuntu-22.04'
    timeout-minutes: 15
    permissions:
      actions: write
      checks: write
      contents: write
      packages: write

    steps:
      - name: 🔒 Check user permissions
        id: check_permissions
        run: |
          # Get the authenticated user's information
          USER_INFO=$(curl -s -H "Authorization: token ${{ github.event.inputs.github_token }}" \
            https://api.github.com/user)

          # Extract username
          USERNAME=$(echo "$USER_INFO" | jq -r '.login')
          echo "Authenticated as: $USERNAME"

          # Check if the user is an organization member and their role
          ORG_MEMBERSHIP=$(curl -s -H "Authorization: token ${{ github.event.inputs.github_token }}" \
            https://api.github.com/orgs/LSDAF/memberships/$USERNAME)

          # Check if the response contains an error
          ERROR=$(echo "$ORG_MEMBERSHIP" | jq -r '.message')
          if [[ "$ERROR" == "Not Found" ]]; then
            echo "::error::User $USERNAME is not a member of the LSDAF organization"
            exit 1
          fi

          # Extract the user's role in the organization
          ROLE=$(echo "$ORG_MEMBERSHIP" | jq -r '.role')
          echo "User role in organization: $ROLE"

          # Check if the user is an admin
          if [[ "$ROLE" == "admin" ]]; then
            echo "User is an organization admin. Proceeding with the workflow."
          elif [[ "$ROLE" == "member" ]]; then
            # Check if the user has maintainer permissions
            ORG_PERMISSION=$(curl -s -H "Authorization: token ${{ github.event.inputs.github_token }}" \
              https://api.github.com/orgs/LSDAF/memberships/$USERNAME | jq -r '.role')

            if [[ "$ORG_PERMISSION" == "maintainer" ]]; then
              echo "::error::User $USERNAME is a maintainer. Only organization admins can push images."
              exit 1
            else
              echo "::error::User $USERNAME is a regular member. Only organization admins can push images."
              exit 1
            fi
          else
            echo "::error::Unknown role: $ROLE. Only organization admins can push images."
            exit 1
          fi

          # Check if the Dockerfile exists
          if [ ! -f "docker/Dockerfile" ]; then
            echo "::error::Dockerfile not found at docker/Dockerfile. Cannot build the image."
            exit 1
          fi

          # Check if the repository exists
          REPO_EXISTS=$(curl -s -H "Authorization: token ${{ github.event.inputs.github_token }}" \
            https://api.github.com/repos/LSDAF/lsadf_api/commits/${{ github.event.inputs.git_sha }})

          ERROR=$(echo "$REPO_EXISTS" | jq -r '.message')
          if [[ "$ERROR" == "Not Found" ]]; then
            echo "::error::Git commit SHA ${{ github.event.inputs.git_sha }} not found in the repository"
            exit 1
          fi

          # Check if the image already exists using Docker CLI
          echo "Checking if image ghcr.io/lsdaf/lsadf_api:${{ github.event.inputs.git_sha }} already exists..."

          # Login to GitHub Container Registry
          echo "${{ github.event.inputs.github_token }}" | docker login ghcr.io -u $USERNAME --password-stdin

          # Try to inspect the image (this will fail if the image doesn't exist)
          if docker manifest inspect ghcr.io/lsdaf/lsadf_api:${{ github.event.inputs.git_sha }} > /dev/null 2>&1; then
            echo "Image with tag ${{ github.event.inputs.git_sha }} already exists."
          else
            echo "Image with tag ${{ github.event.inputs.git_sha }} does not exist yet. Will build and push."
          fi

      - name: 📥 Checkout code at specific commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_sha }}
          lfs: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.event.inputs.github_token }}

      - name: Tag & Push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64, linux/arm64
          file: docker/Dockerfile
          push: true
          tags: ghcr.io/lsdaf/lsadf_api:${{ github.event.inputs.git_sha }}
